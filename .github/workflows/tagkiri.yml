name: tagkiri

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: true
        description: 'タグ名（x.y.zの形式）'

jobs:
  tagkiri:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: extract version
        id: extract-version
        env:
          VERSION: ${{ inputs.version }}
        run: |
          major=$(echo $VERSION | cut -d. -f1)
          minor=$(echo $VERSION | cut -d. -f2)
          patch=$(echo $VERSION | cut -d. -f3)
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "minor=$minor" >> $GITHUB_OUTPUT
          echo "patch=$patch" >> $GITHUB_OUTPUT

      - name: switch to stable branch
        env:
          MAJOR: ${{ steps.extract-version.outputs.major }}
          MINOR: ${{ steps.extract-version.outputs.minor }}
        run: |
          branch_name="stable/$MAJOR.$MINOR"
          git fetch origin $branch_name
          git checkout $branch_name

      - name: Fetch tags
        run: |
          git fetch --tags

      - name: Get prev version
        id: prev-version
        env:
          VERSION: ${{ inputs.version }}
        run: |
          PREV_VERSION=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | awk -v version="$VERSION" '$0 < version' | tail -1)
          echo "prev_version=$PREV_VERSION" >> $GITHUB_OUTPUT

          HEAD=$(git rev-parse HEAD)
          echo "head=$HEAD" >> $GITHUB_OUTPUT

      - name: Create new milestone
        id: create-new-milestone
        uses: actions/github-script@v7
        env:
          NEW_VERSION: ${{ inputs.version }}
        with:
          result-encoding: string
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const newVersion = process.env.NEW_VERSION;

            // マイルストーンが存在するか確認
            let page = 1;
            while (true) {
              const existingMilestones = await github.rest.issues.listMilestones({
                owner,
                repo,
                page,
              });
              if (existingMilestones.data.length === 0) {
                break;
              }
              for (const milestone of existingMilestones.data) {
                if (milestone.title === newVersion) {
                  return milestone.number;
                }
              }
              page++;
            }

            // マイルストーンが存在しない場合、新しいマイルストーンを作成
            const newMilestoneNumber = await github.rest.issues.createMilestone({
              owner,
              repo,
              title: newVersion,
            });
            return newMilestoneNumber.data.number;

      - name: Get all commits between base and head, and find associated PRs
        if: steps.prev-version.outputs.prev_version != ''
        uses: actions/github-script@v7
        env:
          PREV_VERSION: ${{ steps.prev-version.outputs.prev_version }}
          HEAD: ${{ steps.prev-version.outputs.head }}
          MAJOR_VERSION: ${{ steps.extract-version.outputs.major }}
          MINOR_VERSION: ${{ steps.extract-version.outputs.minor }}
          NEW_VERSION: ${{ inputs.version }}
          NEW_MILESTONE_NUMBER: ${{ steps.create-new-milestone.outputs.result }}
        with:
          script: |
            const { PREV_VERSION, HEAD, MAJOR_VERSION, MINOR_VERSION, NEW_VERSION, NEW_MILESTONE_NUMBER } = process.env;
            const { owner, repo } = context.repo;

            const compare = await github.rest.repos.compareCommitsWithBasehead({
              owner,
              repo,
              basehead: `${PREV_VERSION}...${HEAD}`,
            });

            let page = 1;
            let allCommits = [];
            const perPage = 100;

            while (true) {
              const commitsResp = await github.rest.repos.listCommits({
                owner,
                repo,
                sha: HEAD,
                since: compare.data.base_commit.commit.author.date,
                perPage,
                page,
              });
              if (commitsResp.data.length === 0) {
                break;
              }
              allCommits = allCommits.concat(commitsResp.data);
              page++;
              if (commitsResp.data.length < perPage) {
                break;
              }
            }

            // base以降のコミットだけに絞る
            let filteredCommits = [];
            for (const commit of allCommits) {
              if (commit.sha === compare.data.base_commit.sha) {
                break;
              }
              filteredCommits.push(commit);
            }
            filteredCommits = filteredCommits.reverse();

            console.log('対象のコミット:');
            console.log('----------------');
            filteredCommits.forEach((commit) => {
              console.log(`- ${commit.sha}: ${commit.commit.message.split('\n')[0]}`);
            });
            console.log('----------------');

            const prs = filteredCommits.map(async (commit) => {
              // コミットメッセージからPR番号を抽出
              const prNumber = commit.commit.message.split('\n')[0].match(/\(#(\d+)\)$/)?.[1];
              if (!prNumber) {
                console.log(`PR番号が見つかりません: ${commit.sha}`);
                return undefined;
              }

              const pr = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: prNumber,
              });
              const milestoneTitle = pr.data.milestone?.title;

              // PRに設定されたマイルストーンとバージョンが一致する場合、PRのマイルストーンを新しいマイルストーンに変更する
              if (milestoneTitle === `${MAJOR_VERSION}.${MINOR_VERSION}.x`) {
                console.log(`PR #${prNumber}のマイルストーンを${NEW_VERSION}に変更します`);
                return github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: prNumber,
                  milestone: NEW_MILESTONE_NUMBER,
                });
              }

              // PRにコメントを追加する
              console.log(`PR #${prNumber}にコメントを追加します： ${NEW_VERSION}にも適用`);
              return github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: `${NEW_VERSION}にも適用`,
              });
            });
            await Promise.all(prs);

concurrency:
  group: ${{ github.workflow }}-${{ inputs.version }}
  cancel-in-progress: true
