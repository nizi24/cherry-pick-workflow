name: cherry-pick

on:
  workflow_dispatch:

jobs:
  cherry-pick:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create working branch
        run: |
          git checkout -b working

      - name: Fetch Pull Requests for backport
        id: fetch-prs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.extract-version.outputs.version }}
        run: |
          queries=(
            "is:closed \"$VERSIONにも適用\""
            "milestone:$VERSION"
            "is:closed milestone:$VERSION"
          )
          cherry_pick_prs=()
          for query in "${queries[@]}"; do
            prs=$(gh pr list -S="$query" -L=100 --json title,author,mergeCommit,url,closedAt,baseRefName,isDraft,state,body,comments,number --jq "sort_by(.closedAt)")
            cherry_pick_prs=$(jq -s 'add' <(echo "$cherry_pick_prs") <(echo "$prs"))
          done
          echo "cherry_pick_prs=$cherry_pick_prs" >> $GITHUB_OUTPUT

      # PRの本文もしくはコメントに!skip #xxxx, #yyyyが含まれている場合はそのPRのチェリーピックをスキップする
      # ex:
      # !skip #123, #456
      # !skip #789
      - uses: actions/github-script@v7
        id: skip-pr-numbers
        env:
          cherry_pick_prs: ${{ steps.fetch-prs.outputs.cherry_pick_prs }}
        with:
          result-encoding: string
          script: |
            const prs = JSON.parse(process.env.cherry_pick_prs);
            const getSkipPrWithText = (prText) => {
              const lines = prText.split('\n').map((line) => line.trim());
              const skipLines = lines.filter((line) => line.startsWith('!skip'));
              const prNumberArray = skipLines.map((line) => {
                const skipLine = line.replace('!skip', '').trim();
                const prNumberMatches = skipLine.match(/#(\d+)/g);
                if (prNumberMatches) {
                  return prNumberMatches.map((prNumber) => prNumber.replace('#', '').trim());
                }
                return [];
              });
              return prNumberArray.flat().filter((prNumber) => prNumber != null);
            };

            const skipPrs = prs.map((pr) => {
              const bodySkipPrNumbers = getSkipPrWithText(pr.body);
              const commentsSkipPrNumbers = pr.comments.map((comment) => getSkipPrWithText(comment.body)).flat();
              return [...bodySkipPrNumbers, ...commentsSkipPrNumbers];
            });
            return skipPrs.flat();

      - name: Cherry-pick
        id: cherry-pick
        uses: actions/github-script@v7
        env:
          cherry_pick_prs: ${{ steps.fetch-prs.outputs.cherry_pick_prs }}
          skip_pr_numbers: ${{ steps.skip-pr-numbers.outputs.result }}
          branch_name: ${{ github.ref_name }}
        with:
          script: |
            const prs = JSON.parse(process.env.cherry_pick_prs);
            const skipPrNumbers = JSON.parse(process.env.skip_pr_numbers);
            const branchName = process.env.branch_name;

            const  prs.forEach(async (pr) => {
              if (skipPrNumbers.includes(pr.number)) {
                console.log(`Skipping PR ${pr.number}`);
                return;
              }
              console.log(`Cherry-picking PR ${pr.number}`);

              const commitHash = pr.mergeCommit.oid;

              // まだマージされておらず、ベースブランチがこのブランチである場合
              if (pr.state === 'OPEN' && pr.baseRefName === branchName) {
                // マージする
                const { data: mergeData } = await github.rest.pulls.merge({
                  owner: 'github-actions[bot]',
                  repo: context.repo.name,
                  pull_number: pr.number,
                });
                if (mergeData.merged) {
                  console.log(`Merged PR ${pr.number}`);
                } else {
                  console.log(`Failed to merge PR ${pr.number}`);
                  return;
                }
              }

              // 既にチェリーピックされているか確認
              const { exitCode } = await exec(`git cherry-pick ${commitHash}`);
              if (exitCode === 0) {
                console.log(`PR ${pr.number} is already cherry-picked. skip cherry-picking.`);
                return;
              }

              // チェリーピックする
              const { exitCode: cherryPickExitCode, stdout, stderr } = await exec(`git cherry-pick ${commitHash}`);
              if (cherryPickExitCode !== 0) {
                console.log(`Cherry-picking PR ${pr.number} failed.`);
                console.log(stdout);
                console.error(stderr);
                return;
              }
              console.log(`Cherry-picked PR ${pr.number}`);
            });

      - name: Notify failed PRs
        uses: actions/github-script@v7
        env:
          failed_prs: ${{ steps.cherry-pick.outputs.failed_prs }}
        with:
          result-encoding: string
          script: |
            const failedPrs = JSON.parse(process.env.failed_prs);
            const commentPromises = failedPrs.map((pr) => {
              return github.rest.issues.createComment({
                owner: 'github-actions[bot]',
                repo: context.repo.name,
                issue_number: pr.number,
                body: `
                  @${pr.author.login}
                  チェリーピックに失敗しました。
                `,
              });
            });
            await Promise.all(commentPromises);

      - name: Check if cherry-pick is successful
        run: |
          if [ -n "$(git cherry-pick --abort)" ]; then
            echo "Cherry-pick failed"
            exit 1
          fi
