name: cherry-picker
run-name: ${{ github.event.pull_request.merge_commit_title || format('{0} {1}{2} to {3}', 'cherry-pick', '#', inputs.pr_number, inputs.branch) }}

on:
  pull_request:
    types:
      - closed
    branches:
      - main
  workflow_dispatch:
    inputs:
      pr_number:
        type: number
        required: true
        description: 'チェリピしたいPRの番号'
      branch:
        type: choice
        required: true
        description: 'どのブランチにチェリピするか'
        options:
          - stable/1.0.0
          - stable/1.1.0

jobs:
  cherry-pick:
    if: github.event.pull_request.merged == true || github.event.inputs.branch != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set Git config
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Set target branches
        id: set_target_branches
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          TARGET_BRANCH: ${{ inputs.branch }}
        run: |
          if [ -n "$TARGET_BRANCH" ]; then
            echo "target_branches=$TARGET_BRANCH" >> $GITHUB_OUTPUT
            exit 0
          fi

          checked_checkboxes=$(echo "$PR_BODY" | grep '^- \[x\] ' | sed 's/^- \[x\] //g')
          if echo "$checked_checkboxes" | grep -q 'チェリピ不要'; then
            echo "target_branches=''" >> $GITHUB_OUTPUT
          else
            target_branches=$(echo "$checked_checkboxes" | sed -nE 's/^([^\n]*?)に適用.*/\1/p' | tr '\n' ' ')
            echo "target_branches=$target_branches" >> $GITHUB_OUTPUT
          fi

      - name: cherry-pick
        if: steps.set_target_branches.outputs.target_branches != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_BRANCHES: ${{ steps.set_target_branches.outputs.target_branches }}
          PR_NUMBER: ${{ github.event.pull_request.number || inputs.pr_number }}
        run: |
          pull_request_data=$(gh pr view "$PR_NUMBER" --json mergeCommit,author)
          MERGE_COMMIT_SHA=$(echo "$pull_request_data" | jq -r '.mergeCommit.oid')
          PR_AUTHOR=$(echo "$pull_request_data" | jq -r '.author.login')

          for branch in $TARGET_BRANCHES; do
            if [ -z "$branch" ]; then
              continue
            fi
            echo "Cherry-picking to $branch $MERGE_COMMIT_SHA"
            git fetch --depth=1 origin $branch
            git checkout $branch

            git checkout .
            git clean -fd

            git cherry-pick $MERGE_COMMIT_SHA || {
              echo "::error::Conflict detected in $branch. Please resolve manually."

              new_branch_name="cherry-pick/$branch/$PR_NUMBER"
              git checkout -b "$new_branch_name"
              git add .
              git reset .github
              git commit -m "Cherry-pick from #$PR_NUMBER failed. Please resolve manually." --allow-empty
              git push origin "$new_branch_name"

              pr_title="$branch/cherry-pick from #$PR_NUMBER"
              pr_body=$(echo "このPRは自動作成されました。
              関連するPR #$PR_NUMBER

              @$PR_AUTHOR コンフリクトを解消してください。
              " | sed 's/^[[:space:]]*//'
              )
              pr_url=$(gh pr create --base "$branch" --head "$new_branch_name" --title "$pr_title" --body "$pr_body" --assignee "$PR_AUTHOR")
              pr_number=$(echo "$pr_url" | sed -nE 's/.*\/pull\/([0-9]+)/\1/p')

              gh pr comment "$PR_NUMBER" --body "\`$branch\` へのcherry-pickに失敗しました。コンフリクトを解消してください。 #$pr_number"

              continue
            }

            git pull --rebase origin "$branch"
            git push origin "$branch"

            cherry_pick_commit=$(git rev-parse HEAD)
            gh pr comment "$PR_NUMBER" --body "\`$branch\` にcherry-pickしました。 $cherry_pick_commit"
          done
